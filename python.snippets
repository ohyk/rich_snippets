snippet #!
#!/usr/bin/env python3
endsnippet

snippet #!2
# -*- coding: utf-8 -*-
#!/usr/bin/env python2
endsnippet

snippet #3
#!/usr/bin/env python3
endsnippet

snippet imp
import ${0:module}
endsnippet

snippet uni
def __unicode__(self):
	${0:representation}
endsnippet

snippet from
from ${1:package} import ${0:module}
endsnippet

# Module Docstring
snippet docs
"""
File: ${1:`vim_snippets#Filename('$1.py', 'foo.py')`}
Author: `g:snips_author`
Email: `g:snips_email`
Github: `g:snips_github`
Description: ${0}
"""
endsnippet


# Unittest skip
snippet sk "skip unittests" b
@unittest.skip(${1:skip_reason})
endsnippet


snippet wh
while ${1:condition}:
	${0:${VISUAL}}
endsnippet

# dowh - does the same as do...while in other languages
snippet dowh
while True:
	${1}
	if ${0:condition}:
		break
endsnippet

snippet with
with ${1:expr} as ${2:var}:
	${0:${VISUAL}}
endsnippet

snippet awith
async with ${1:expr} as ${2:var}:
	${0:${VISUAL}}
endsnippet

# New Class
snippet cl
class ${1:ClassName}(${2:object}):
	"""
	${3:docstring for $1}
	"""
	def __init__(self, ${4:arg}):
		${5:super($1, self).__init__()}
		self.$4 = $4
		${0}
endsnippet

snippet cla
class ${1:class_name}:
	"""
	${0:description}
	"""
endsnippet

snippet clai
class ${1:class_name}:
	"""
	${2:description}
	"""
	def __init__(self, ${3:args}):
		${0}
endsnippet

# New Function
snippet def
def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
	"""${3:docstring for $1}"""
	${0}
endsnippet

snippet deff
def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
	${0}
endsnippet

snippet adef
async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
	"""${3:docstring for $1}"""
	${0}
endsnippet

snippet adeff
async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
	${0}
endsnippet

# New Method
snippet defi
def __init__(self, ${1:args}):
	${0}
endsnippet

snippet defm
def ${1:mname}(self, ${2:arg}):
	${0}
endsnippet

snippet adefm
async def ${1:mname}(self, ${2:arg}):
	${0}
endsnippet

# New Property
snippet property
def ${1:foo}():
	doc = "${2:The $1 property.}"
	def fget(self):
		${3:return self._$1}
	def fset(self, value):
		${4:self._$1 = value}
	def fdel(self):
		${0:del self._$1}
	return locals()
$1 = property(**$1())
endsnippet

# Ifs
snippet if
if ${1:condition}:
	${0:${VISUAL}}
endsnippet

snippet el
else:
	${0:${VISUAL}}
endsnippet

snippet ei
elif ${1:condition}:
	${0:${VISUAL}}
endsnippet

# For
snippet for
for ${1:item} in ${2:items}:
	${0}
endsnippet

# Encodes
snippet cutf8
# -*- coding: utf-8 -*-
endsnippet

snippet clatin1
# -*- coding: latin-1 -*-
endsnippet

snippet cascii
# -*- coding: ascii -*-
endsnippet

# Lambda
snippet ld
${1:var} = lambda ${2:vars} : ${0:action}
endsnippet

snippet ret
return ${0}
endsnippet

snippet .
self.
endsnippet
